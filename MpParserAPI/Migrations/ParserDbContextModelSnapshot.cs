// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MpParserAPI.DbContext;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MpParserAPI.Migrations
{
    [DbContext(typeof(ParserDbContext))]
    partial class ParserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MpParserAPI.Models.ParserLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParserId")
                        .HasColumnType("uuid");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TelegramUserId");

                    b.ToTable("ParserLogsTable");
                });

            modelBuilder.Entity("MpParserAPI.Models.ParserStateTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string[]>("Keywords")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("ParserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpamWords")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TargetGroups")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<TimeSpan?>("TotalParsingMinutes")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("ParsersStates");
                });

            modelBuilder.Entity("MpParserAPI.Models.TelegramUser", b =>
                {
                    b.Property<long>("TelegramUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TelegramUserId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ProfilePhotoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TelegramUserId");

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("MpParserAPI.Models.ParserLogs", b =>
                {
                    b.HasOne("MpParserAPI.Models.TelegramUser", "TelegramUser")
                        .WithMany("ParserLogs")
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TelegramUser");
                });

            modelBuilder.Entity("MpParserAPI.Models.TelegramUser", b =>
                {
                    b.Navigation("ParserLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
